<project xmlns:ivy="antlib:org.apache.ivy.ant" name="dashboard">
    <property file="build.properties" />

    <target name="init">
        <mkdir dir="${resourceDir}"/>
        <mkdir dir="${sourceDir}"/>
        <mkdir dir="${testDir}"/>
        <mkdir dir="${outputDir}"/>
        <mkdir dir="${libDir}"/>
        <mkdir dir="${reportsDir}"/>
        <mkdir dir="${testLibDir}"/>
    </target>

    <target name="clean" depends="init">
        <delete dir="${outputDir}"/>
        <delete dir="${libDir}"/>
        <delete dir="${reportsDir}"/>
        <delete file="${outputZip}"/>
        <delete file="${outputJar}"/>
        <ivy:cleancache />
    </target>

    <target name="retrieve" depends="init">
        <ivy:retrieve conf="testing" pattern="${testLibDir}/[artifact].[ext]"/>
        <ivy:retrieve conf="application" pattern="${libDir}/[artifact].[ext]"/>
    </target>

    <target name="compile" depends="init">
        <javac srcdir="${sourceDir}" destdir="${outputDir}" extdirs="${libDir}"
                includeantruntime="false" >
            <classpath path="${classpath}"/>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>
    </target>

    <target name="run" depends="compile">
        <!-- use "ant -Dmainclass=* run" to run a different class than main-->
        <java classname="${mainclass}" fork="true">
            <classpath path="${classpath}">
                <fileset dir="${libDir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <target name="release" depends="updateMessageDatabase,test">
        <fail message="Failing tests; build aborted" if="test.failed"/>
        <jar destfile="${outputJar}" basedir="${outputDir}">
            <zipgroupfileset dir="${libDir}">
                <include name="*.jar"/>
            </zipgroupfileset>
            <manifest>
                <attribute name="Main-Class" value="${mainclass}"/>
            </manifest>
        </jar>
        <zip destfile="${outputZip}">
            <zipfileset dir="${packDir}" prefix="${packDir}"/>
            <zipfileset src="${packZip}"/>
            <zipfileset dir="./" includes="${outputJar}"/>
        </zip>
        <delete dir="${outputDir}" />
    </target>

    <target name="test" depends="compile">
        <javac srcdir="${testDir}" destdir="${outputDir}" extdirs="${libDir}:${outputDir}"
                includeantruntime="false" >
            <classpath path="${classpath}">
                <fileset dir="${testLibDir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <compilerarg value="-XDignore.symbol.file"/>
        </javac>

        <junit failureproperty="test.failed">
            <classpath>
                <pathelement path="${classpath}"/>
                <fileset dir="${testLibDir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${libDir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <!-- <formatter type="plain"/> -->
            <formatter type="plain" usefile="false" />

            <batchtest fork="yes" todir="${reportsDir}">
                <fileset dir="${testDir}">
                    <include name="**/*_test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="updateMessageDatabase">
        <exec executable="${msgDbTool}">
          <arg value="${DroneLibsDir}"/>
          <arg value="${MessageDbFile}"/>
        </exec>
    </target>

    <target name="export_graph" depends="compile">
        <jar destfile="graph.jar">
            <fileset dir="${outputDir}" includes="com/graph/*" />
            <fileset dir="${outputDir}" includes="com/table/*" />
        </jar>
    </target>
</project>
